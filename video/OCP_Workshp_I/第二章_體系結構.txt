Oracle DB的定義
- Oracle 關係型數據庫管理系統(Relational Database Management System)
    - 關係模型 - 使用二維表來存取數據
    - 數據庫 - 存儲二維表數據的文件
    - 管理系統 - 軟體讓我們能夠對數據庫進行曾刪改查

Oracle DB體系結構概覽
    - 關係型數據庫管理系統包含三個部分
	- Hardware
	- Software
	- Data
    - 服務器Server (Hardware) -> 給數據庫軟體分配 CPU 內存
				    - 內存結構 - 專用名稱叫做系統全局區(System Global Area)
			      -> 進程把硬碟的數據讀入內存,把內存中更新過的數據寫入文件中
				    - 進程結構 - 進程有負責寫數據的,有負責讀數據的,有負責檢查數據的,有負責監控的
			      -> 數據以二維表的形式存儲在文件
				    - 存儲結構 - 數據庫
    - 數據庫兩個概念,數據庫是以這兩部分組成 - 實例(instance) - 操作系統給數據庫分配的內存與數據庫所使用的進程 (內存+進程)
		      		            - 數據庫(database) - 存儲數據的文件
    - 客戶端Client (Software) -> 用戶發起增刪改查的請求會啟動用戶進程               
			            - 用戶進程 - 蒐集用戶的SQL請求,然後發送給服務器
    			      -> 服務器啟動服務器進程來接收用戶的請求
 			            - 服務器進程 - 將數據庫處理完畢的結果發送給用戶
			      -> 服務器進程需要內存結構PGA,與SGA市區分開的
    - 內存結構分為SGA跟PGA
	- 內存結構內分為很多區域,每個區域都有自己獨立的功能
	    - 比如SGA內有 - 緩存SQL語句
			  - 緩存數據(DATA)
			  - 執行JAVA代碼
			  - 做流(Stream)複製用
			  - I/O
			  - 日誌(log)
	    - PGA裡面則是放跟用戶有關的,比如 - 用戶的數據
					     - 用戶發起的SQL
					     - 用戶檢索到的數據
    - SGA的作用
	- 當用戶執行SQL語句 -> 數據庫拿到語句後要先進行分析 -> 將分析的步驟編譯為二進制的代碼 -> 然後放到CPU去執行
	    - 分析比如 - SQL語句要訪問的對象
		       - 哪個用戶發起的請求
	 	       - 這個用戶有沒有操作這個對象的權限
		       - 是做增刪改查的哪一個呢
		       - 這個對象(object)是否存在
		       - 有多少行多少列呢
	- SGA內存內的區域作用
	    - 緩存SQL語句的區域 - 相同語句能共享給所有用戶
	        - 執行需要 - 時間
 		           - 資源(resource)
	        - 當另外一個用戶執行相同的語句就可以從緩存SQL的內存中將結果發給此用戶,而不用經過分析,編譯
	    - 緩存數據的區域 - 存儲經常訪問的數據(hot data)
  	        - 經常被訪問的數據會駐留在這個內存中,這樣當再次被訪問後就沒必要從硬碟去讀取了
 	        - 硬碟(HDD) 讀寫的速度與內存(RAM)有很大的差別
		    - 硬碟一般讀寫速度為100MB/s
		    - 內存一般讀寫速度為10GB/s
	        - 設計數據庫
	            - 盡量讓所有的訪問與操作在內存中執行
		    - 避免訪問數據時去訪問硬碟
		    - 避免往硬碟裡面去讀寫
	- SGA的特點是被所有用戶共享
    - PGA的作用
	- 當用戶執行SQL語句由用戶進程蒐集然後發給服務器進程,這時服務器進程就需要一個區域去存儲原始的SQL
	- 當數據庫把結果(result)返回時也需要一個區域來存儲結果
	- PGA是不被其他用戶去共享,每個人操作時都有一個獨立的服務器進程,每個服務器進程都有一個獨立的內存區(PGA)

多層體系結構
    - C/S架構(Client/Server) 客戶端<------------>服務器
        - 客戶端直接對服務器發起請求
	- 客戶端部屬軟體工作量大
	- 大量用戶訪問服務器會造成數據庫需要使用大量的資源去接受,分析,處理,返回客戶端所發出的請求
    - B/S架構(Browser/Server) 客戶端<-->中間層<-->服務器
	- 解決大併發,大量的用戶的問題
	- 以瀏覽器來訪問系統
	- 客戶端不需要部屬軟體
	- 中間層 - 用來接收用戶發起的請求
                 - 做的工作 -> 應用程序上的邏輯上的運算
			    -> 如果客戶端發起的是數據的請求,轉發數據  庫的操作請求
			    -集群中的存數據 - 用戶發起的數據
					- 數據庫返還的數據
		 - 有時候這個中間層也可以被叫作應用層,通常是以一些應用服務器來構成的
	- 數據庫位於架構的最後方,是安全級別最高的,被防火牆層層保護,從客戶端到中間層有防火牆,從中間層到數據庫也有防火牆,為了保護數據安全

實例(instance)與數據庫配置(Database Configurrations)的關係
    - 服務器帶有本地的存儲 - 存儲可以是服務器裡的硬碟
			   - 可以是專門的設備 - FC San
					      - NFS
					      - ASM
					      - RAW
    - 非集群環境(Nonclustered System)
	- 一台服務器對應一個本地存儲
	- 創建好數據庫後,啟動數據庫就生成了一個實例(內存+進程)
	- 如果有保存數據,那在本地存儲會生成一個數據庫(文件)
	- 這樣就可以用實例來操縱數據庫裡面的文件
	- 如果需要第二個數據庫,我們可以直接在服務器中再創建一個實例讓他對應一個新的數據庫
	- 所以一個服務器裡可以創建多個實例,在存儲上也能夠有多個數據庫,但是每一個實例只能操作一個數據庫,是一對一的關係
	- 一台服務器上裝多個數據庫,每個數據庫上都有自己專有的實例來操作
    - 集群環境(Clustered System)
	- 多台服務器對應一個共享存儲
	- 通過硬體的手段或者軟體的手段實現共同訪問一個存儲區
	- 每一台服務器上都有實例但是他們訪問的是同一個數據庫,這就是多實例對單數據庫,是多對一的關係
	- 每個實例可以同時對同一張表進行增刪改查,而這種併發的問題有一個鎖(Lock)的機制來管理
	- 這種結構非常安全,要是集群中有服務器故障,只要還有一個服務器在正常運行,用戶還是能正常運用數據庫,因此安全性就提升了
	- 一個數據庫放到一個共享的存儲上,多台服務器分別啟動多個實例去操作同一個數據庫

連接到數據庫的概念
    - 用戶發起一個數據庫操作的過程
	- 用戶啟動客戶端
    	- 用戶執行SQL語句
    	- 客戶端啟動用戶進程(User process)
    	- 用戶進程將SQL語句蒐集
    	- 用戶進程去聯繫數據庫服務器
    	- 如果有聯繫成功則服務器啟動服務器進程(Server process)
    	- 服務器進程給用戶進程執行一對一的服務
    	- 服務器進程處理用戶進程發過來的SQL的請求
    	- 服務器進程將請求交由服務器去執行
	- 服務器執行完後就將執行結果返還回去
    - 用戶進程與服務器進程之間的通訊叫作連接(connection)
    - 從用戶發起SQL到返還結果的一整個過程叫作會話(session)
    - 會話有一個生命週期,從用戶連近來進行操作到得到結果,這個會話就完成了,如果再發起一個操作再得到一個結果,這又是一個會話